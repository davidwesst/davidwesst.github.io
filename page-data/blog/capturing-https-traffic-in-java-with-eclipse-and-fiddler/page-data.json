{
    "componentChunkName": "component---src-templates-post-template-js",
    "path": "/blog/capturing-https-traffic-in-java-with-eclipse-and-fiddler/",
    "result": {"data":{"markdownRemark":{"excerpt":"I’ve been struggling with a JSON parsing error where my application is using the Spring to send and receive messages from a RESTful Web Service. It’s pretty…","html":"<p>I’ve been struggling with a JSON parsing error where my application is using the Spring to send and receive messages from a RESTful Web Service. It’s pretty straight forward: I’ve annotated my object properties to match up with the appropriate JSON keys, Spring takes my POJO and turns it into a JSON string sends the request along with the JSON as the body to the HTTPS endpoint, et voilà!</p>\n<!-- more -->\n<p>I’ve been struggling with a JSON parsing error where my application is using the <a href=\"https://spring.io/guides/gs/consuming-rest/\">Spring</a> to send and receive messages from a RESTful Web Service. It’s pretty straight forward: I’ve annotated my object properties to match up with the appropriate JSON keys, Spring takes my POJO and turns it into a JSON string sends the request along with the JSON as the body to the HTTPS endpoint, et voilà!</p>\n<h2>The Problem</h2>\n<p>The problem comes in when something goes wrong with the request/response. Because the Spring obfuscates the actual request/response content, debugging it means you need to take a look at the traffic being sent over the wire. Since we’re using a good RESTful service, the connection is done through HTTPS, meaning it’s encrypted with a certificate that we don’t have.</p>\n<p>On top of that, it appears that Fiddler doesn’t automatically capture Java HTTP traffic automatically, so that’s a thing too.</p>\n<p>After some internet sleuthing, I put together a solution that I wanted to share with you all, and so that I don’t forget how to do it myself.</p>\n<h3>Setup</h3>\n<ol>\n<li>Downlaod and Install <a href=\"http://www.telerik.com/fiddler\">Fiddler</a>. I used Fiddler4, because I’m awesome.</li>\n<li>Run it and make sure it’s capturing HTTP traffic</li>\n<li>Open <em>Tools —> Fiddler Options —> Connections Tab</em> and take note of the “Fiddler listens on port” value. It’s likely 8888, but best to be sure.</li>\n<li>In the same window select <em>HTTPS Tab</em> and make sure sure that the following options <strong>are checked</strong>:\n<ul>\n<li>Capture HTTPS CONNECTS</li>\n<li>Decrypt HTTPS traffic (…from all processes)</li>\n</ul>\n</li>\n</ol>\n<p>{% asset_img certificate-warning.png %}</p>\n<ol start=\"6\">\n<li>Read, and if you’re alright with it, install the certificate.</li>\n<li>On the HTTPS tab, click the <em>Export Root Certificate to Desktop</em> and click OK.</li>\n</ol>\n<p>{% asset_img fiddler-options.png %}</p>\n<h3>Generating a Keystore</h3>\n<ol>\n<li>Open a command line terminal as an administrator</li>\n<li>Run the keytool for the JDK your application is using:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;JDK_Home>\\bin\\keytool.exe -import -file C:\\Users\\&lt;Username>\\Desktop\\FiddlerRoot.cer^\r\n -keystore FiddlerKeystore -alias Fiddler</code></pre></div>\n<ol start=\"3\">\n<li>Enter a password and remember it</li>\n<li>Your keystore is created as a file named “FiddlerKeystore*. Take note of where it is located on your machine.</li>\n</ol>\n<h3>Configuring Eclipse</h3>\n<p><strong>NOTE:</strong> You are not required to use Eclipse for this, but it seems to be the popular way of writing Java code.</p>\n<ol>\n<li>Open your project and go to <em>Run —> Run Configurations</em></li>\n<li>Select the Run Configuration you want to use where you’ll capture the HTTPS traffic.</li>\n<li>Select the <em>Arguments</em> tab</li>\n<li>Add the following to the <em>VMargs</em> textbox:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-DproxySet=true\r\n-DproxyHost=127.0.0.1\r\n-DproxyPort=8888\r\n-Djavax.net.ssl.trustStore=\"path\\to\\keystore\\FiddlerKeystore\"\r\n-Djavax.net.ssl.trustStorePassword=yourpassword</code></pre></div>\n<ol start=\"5\">\n<li>Click the <em>Apply</em> button</li>\n<li>Click the <em>Run</em> button to try it out</li>\n</ol>\n<p>{% asset_img eclipse-settings.png %}</p>\n<p>Tada! You’re done, and you should now be able to run your code and see the HTTP request and response, completely.</p>\n<p>{% asset_img fiddler-success.png %}</p>\n<h3>Alternative Solution --- Configuring Your Code</h3>\n<p>Add the following lines to the application that you want to capture the HTTPS traffic.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t\t// for capturing HTTP traffic\r\n\t\tSystem.setProperty(\"http.proxyHost\", \"127.0.0.1\");\r\n\t\tSystem.setProperty(\"http.proxyPort\", \"8888\");\r\n\t\t// for capturing HTTPS traffic\r\n\t\tSystem.setProperty(\"https.proxyHost\", \"127.0.0.1\");\r\n\t\tSystem.setProperty(\"https.proxyPort\", \"8888\");</code></pre></div>\n<p>—\r\nThanks for playing. ~ DW</p>\n<h6>References</h6>\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/8549749/how-to-capture-https-with-fiddler-in-java\">Stack Overflow - How to Capture HTTPS with Fiddler in Java</a></li>\n<li><a href=\"http://codeketchup.blogspot.ca/2014/03/how-to-use-eclipse-with-fiddler-step-by.html\">How to Use Eclipse with Fiddler</a></li>\n</ol>","fields":{"slug":"/blog/capturing-https-traffic-in-java-with-eclipse-and-fiddler/"},"frontmatter":{"title":"Capture HTTPS Traffic in Java with Eclipse, and Fiddler","tags":["eclipse","fiddler","https","java"],"categories":["development"],"date":"October 07, 2015","description":null,"excerpt":null,"social_image":null}},"prev":{"frontmatter":{"title":"Custom Tasks for Java in Visual Studio Code"},"fields":{"slug":"/blog/custom-tasks-for-java-in-visual-studio-code/"}},"next":{"frontmatter":{"title":"Downgrading Windows Phone 10 Technical Preview - The Lowlights"},"fields":{"slug":"/blog/downgrading-windows-phone-10-technical-preview-the-lowlights/"}}},"pageContext":{"slug":"/blog/capturing-https-traffic-in-java-with-eclipse-and-fiddler/","prevSlug":"/blog/custom-tasks-for-java-in-visual-studio-code/","nextSlug":"/blog/downgrading-windows-phone-10-technical-preview-the-lowlights/"}},
    "staticQueryHashes": ["1308755293","2841359383","4224293195"]}