{
    "componentChunkName": "component---src-templates-post-template-js",
    "path": "/blog/custom-tasks-for-java-in-visual-studio-code/",
    "result": {"data":{"markdownRemark":{"excerpt":"Now that I’m a Java Developer, I no longer worry about the bloating feeling I get when I need to open up the original Visual Studio. Now I worry about opening…","html":"<p>Now that I’m a Java Developer, I no longer worry about the bloating feeling I get when I need to open up the original Visual Studio. Now I worry about opening another instance of Eclipse. Don’t get me wrong, Visual Studio and Eclipse are both great tools, but there are plenty of times where I don’t need to bring a forklift just to move a single box.</p>\n<!--more-->\n<p>This is why I love Visual Studio Code.</p>\n<p>That being said, we don’t have native rich support for Java in Code. We <em>do</em> have syntax and bracket matching for Java, I wanted to see if I could compile and possibly display any errors directly in code.</p>\n<p>We do that using <a href=\"https://code.visualstudio.com/docs/editor/tasks\">Tasks</a>, and here’s what I did:</p>\n<h3>Configure a Task Runner</h3>\n<p>To start you need a task runner for your project, which is where you will…you guessed it…configure tasks.</p>\n<ol>\n<li>Hit <code class=\"language-text\">Ctrl + Shift + P</code> to bring up the command palette. Search for “task” and you’ll get the <em>Configure Task Runner</em> command.</li>\n<li>Select it and press <code class=\"language-text\">Enter</code> to generate a tasks.json file.</li>\n</ol>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/configure-task-runner.png\" alt=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/configure-task-runner.png\"></p>\n<p>The default <em>tasks.json</em> file has some samples along with some reference variables at the top of the file.</p>\n<p>Next up, we create our task.</p>\n<h3>Configure a Task</h3>\n<p>To see if we have any errors, we want to run our Java compiler on our code to get any error. In the example below, I’m using a simple project with a <code class=\"language-text\">src</code> and a <code class=\"language-text\">target</code> directory where the <code class=\"language-text\">src</code> directory contains all of our Java files.</p>\n<ol>\n<li>First, clear out the other tasks in the file. We only want the one we’re going to use which is our javac command.</li>\n<li>Add the task to run the Java compiler</li>\n</ol>\n<p>{% codeblock lang:javascript %}\r\n{\r\n“version”: “0.1.0”,\r\n“command”: “javac”,\r\n“showOutput”: “always”,\r\n“isShellCommand”: true,\r\n“args”: [“-d”,”${workspaceRoot}\\build\\classes”,”${workspaceRoot}\\src\\main\\java\\*.java”]\r\n}\r\n{% endcodeblock %}</p>\n<ol start=\"3\">\n<li>Now, we can run our command by hitting <code class=\"language-text\">Ctrl + Shift + P</code> and typing <em>Run Task</em> should show us our new Java task.</li>\n</ol>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/new-javac-task.png\" alt=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/new-javac-task.png\"></p>\n<ol start=\"4\">\n<li>Select it to run it, and assuming you have an error, it should display something in the output window.</li>\n</ol>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/javac-output.png\" alt=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/javac-output.png\"></p>\n<p>We’re making progress, but it would be nice to see those errors inline in our code files, wouldn’t it? That’s where Problem Matchers come in.</p>\n<h3>Add a Problem Matcher to your Task</h3>\n<p>Now that we have a task running, we need to tell Code how to process the output. We do that using configuring a problem matcher that uses a regular expression to parse the output.</p>\n<p>Here’s what my task looks like now:</p>\n<p>{% codeblock lang:javascript %}\r\n{\r\n“version”: “0.1.0”,\r\n“command”: “javac”,\r\n“showOutput”: “silent”,\t// changed so that the output window doesn’t pop up constantly\r\n“isShellCommand”: true,\r\n“args”: [“-d”,”${workspaceRoot}\\target”,”${workspaceRoot}\\src\\<em>.java”],\r\n“problemMatcher”: {\r\n“owner”: “external”,\r\n“fileLocation”: [“absolute”],\r\n“pattern”: [\r\n{\r\n“regexp”: ”^(.+\\.java):(\\d):(?:\\s+(error)):(?:\\s+(.</em>))$“,\r\n“file”: 1,\r\n“location”: 2,\r\n“severity”: 3,\r\n“message”: 4\r\n}\r\n]\r\n}\r\n}\r\n{% endcodeblock %}</p>\n<p>If you’d like the full scoop on how this works, you can check out the explanation on the Code documentation on <a href=\"https://code.visualstudio.com/Docs/editor/tasks#_defining-a-problem-matcher\">writing problem matchers</a> but basically each of the variables listed beneath the <code class=\"language-text\">regexp</code> represent a part of the VS code message that should display.</p>\n<p>Now that I’ve updated my task. If we run it again by hitting <code class=\"language-text\">Ctrl + P</code> and typing <em>task javac</em> we should get the following:</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/error-inline.png\" alt=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/error-inline.png\"></p>\n<p>…and if we bring up our warnings by hitting <code class=\"language-text\">Ctrl + Shift + M</code> we should see:</p>\n<p><img src=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/error-warning.png\" alt=\"http://blog.davidwesst.com/2015/10/Custom-Tasks-for-Java-in-Visual-Studio-Code/error-warning.png\"></p>\n<p>Click on the warning, should bring you to the file with the error in it.</p>\n<h2>Hey, Why Can’t I Add More Tasks to tasks.json?</h2>\n<p>Great question! Although I don’t have an official answer, here’s my opinion: <strong>It’s a bad idea</strong>.</p>\n<p>The <code class=\"language-text\">tasks.json</code> file is an IDE specific configuration file. All it’s really doing to making shortcuts through your IDE to execute different commands from the command line. So rather than setup multiple tasks for each individual command, you should do yourself and your project a favour and setup a build script and use that in your tasks.json file.</p>\n<p>A build script will have all the commands and scripts you need to run, build, test, or do whatever to your project. Plus, it’s usable <em>outside</em> of Code, so it’s much more useful.</p>\n<p>Although totally customizable (which I’ll cover in <a href=\"http://westerndevs.com/using-java-build-script-tasks-in-visual-studio-code/\">an upcoming post</a>), you can see this action now if you’re using <a href=\"https://code.visualstudio.com/Docs/editor/tasks#_mapping-gulp-grunt-and-jake-output-to-problem-matchers\">Gulp, Grunt, or Jake</a> in your existing projects.</p>\n<hr>\n<p>Thanks for playing. ~ DW</p>\n<h5>References</h5>\n<ol>\n<li><a href=\"https://code.visualstudio.com/Docs/editor/tasks\">Tasks in Visual Studio Code</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/editor/tasks_appendix\">tasks.json Schema reference</a></li>\n<li><a href=\"https://code.visualstudio.com/Docs/editor/tasks#_mapping-gulp-grunt-and-jake-output-to-problem-matchers\">Mapping Gulp, Grunt and Jake Output to Problem Matchers</a></li>\n</ol>","fields":{"slug":"/blog/custom-tasks-for-java-in-visual-studio-code/"},"frontmatter":{"title":"Custom Tasks for Java in Visual Studio Code","tags":["java","vscode"],"categories":null,"date":"October 14, 2015","description":null,"excerpt":null,"social_image":null}},"prev":{"frontmatter":{"title":"Using Java Build Script Tasks in Visual Studio Code"},"fields":{"slug":"/blog/using-java-build-script-tasks-in-visual-studio-code/"}},"next":{"frontmatter":{"title":"Capture HTTPS Traffic in Java with Eclipse, and Fiddler"},"fields":{"slug":"/blog/capturing-https-traffic-in-java-with-eclipse-and-fiddler/"}}},"pageContext":{"slug":"/blog/custom-tasks-for-java-in-visual-studio-code/","prevSlug":"/blog/using-java-build-script-tasks-in-visual-studio-code/","nextSlug":"/blog/capturing-https-traffic-in-java-with-eclipse-and-fiddler/"}},
    "staticQueryHashes": ["1308755293","2841359383","4224293195"]}